from gpiozero.pins.mock import MockPin
from gpiozero.pins.local import LocalPiFactory
import os

class MockFactory(LocalPiFactory):
    """
    Factory for generating mock pins. The *revision* parameter specifies what
    revision of Pi the mock factory pretends to be (this affects the result of
    the :attr:`~gpiozero.Factory.pi_info` attribute as well as where pull-ups
    are assumed to be). The *pin_class* attribute specifies which mock pin
    class will be generated by the :meth:`pin` method by default. This can be
    changed after construction by modifying the :attr:`pin_class` attribute.
    .. attribute:: pin_class
        This attribute stores the :class:`MockPin` class (or descendent) that
        will be used when constructing pins with the :meth:`pin` method (if
        no *pin_class* parameter is used to override it). It defaults on
        construction to the value of the *pin_class* parameter in the
        constructor, or :class:`MockPin` if that is unspecified.
    """
    def __init__(self, revision=None, pin_class=None):
        super(MockFactory, self).__init__()
        if revision is None:
            revision = os.environ.get('GPIOZERO_MOCK_REVISION', 'a02082')
        if pin_class is None:
            pin_class = os.environ.get('GPIOZERO_MOCK_PIN_CLASS', MockPin)
        self._revision = revision
        if isinstance(pin_class, bytes):
            pin_class = pin_class.decode('ascii')
        if isinstance(pin_class, str):
            dist = pkg_resources.get_distribution('gpiozero')
            group = 'gpiozero_mock_pin_classes'
            pin_class = pkg_resources.load_entry_point(dist, group, pin_class.lower())
        if not issubclass(pin_class, MockPin):
            raise ValueError('invalid mock pin_class: %r' % pin_class)
        self.pin_class = pin_class

    def _get_revision(self):
        return self._revision

    def reset(self):
        """
        Clears the pins and reservations sets. This is primarily useful in
        test suites to ensure the pin factory is back in a "clean" state before
        the next set of tests are run.
        """
        self.pins.clear()
        self._reservations.clear()

    def pin(self, spec, pin_class=None, **kwargs):
        """
        The pin method for :class:`MockFactory` additionally takes a *pin_class*
        attribute which can be used to override the class' :attr:`pin_class`
        attribute. Any additional keyword arguments will be passed along to the
        pin constructor (useful with things like :class:`MockConnectedPin` which
        expect to be constructed with another pin).
        """
        if pin_class is None:
            pin_class = self.pin_class
        n = self.pi_info.to_gpio(spec)
        try:
            pin = self.pins[n]
        except KeyError:
            pin = pin_class(self, n, **kwargs)
            self.pins[n] = pin
        # else:
        #     # Ensure the pin class expected supports PWM (or not)
        #     if issubclass(pin_class, MockPWMPin) != isinstance(pin, MockPWMPin):
        #         raise ValueError('pin %d is already in use as a %s' % (n, pin.__class__.__name__))
        return pin
